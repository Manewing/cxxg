name: Build

on:
  workflow_call:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        platform_version: [22.04]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            platform_version: 22.04
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            platform_version: 22.04
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            platform_version: 22.04
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            platform_version: 22.04
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.4
        id: install-boost
        with:
            boost_version: 1.83.0
            platform_version: ${{ matrix.platform_version }}
            boost_install_dir: boost-1.83.0-${{ matrix.os }}-${{ matrix.cpp_compiler }}

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install python packages
        # Install python packages needed for the workflow
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_TESTS=ON
          -DPYTHON_EXECUTABLE=python3
          -DBoost_INCLUDE_DIR=${{steps.install-boost.outputs.BOOST_ROOT}}/include
          -DBoost_LIBRARY_DIRS=${{steps.install-boost.outputs.BOOST_ROOT}}/lib
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is
        # needed because the default Windows generator is a multi-config generator
        # (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that
        # --build-config is needed because the default Windows generator is a
        # multi-config generator (Visual Studio generator).  See
        # https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

      - name: Install Strip
        run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --prefix install --strip

      - name: Pack
        run: cmake -E tar cfv cxxg-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}.zip  --format=zip install

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cxxg-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}.zip
          path: ./cxxg-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}.zip
