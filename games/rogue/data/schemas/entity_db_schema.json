{
  "$id": "https://rogue-todo.com/entity-db-schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "JSON Schema for the entity database",
  "type": "object",
  "required": ["entity_templates"],
  "properties": {
    "entity_templates": {
      "type": "array",
      "items": {
        "$ref": "#/defs/entity_template"
      }
    }
  },
  "defs": {
    "entity_template": {
      "type": "object",
      "required": ["name", "assemblers"],
      "properties": {
        "name": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "from_template": {
          "type": "string",
          "description": "Name of the template this template inherits from"
        },
        "assemblers": {
          "type": "object",
          "description": "Assembler that are to be used to create the entity. Marking any assembler as false will remove it from the entity if it was inherited from a parent.",
          "properties": {
            "position": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "collision": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "health": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "mana": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "block_los": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "visible": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "attack_ai": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "wander_ai": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "search_ai": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "line_of_sight": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "equipment": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "auto_equip": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "drop_equipment": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "agility": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "healer": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "shop": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "work_bench": {
              "$ref": "#/defs/assembler_types/on_off"
            },
            "door": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/door"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "faction": {
              "anyOf": [
                {
                  "$ref": "https://rogue-todo.com/common_types_schema.json#/defs/faction_kind"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "race": {
              "anyOf": [
                {
                  "$ref": "https://rogue-todo.com/common_types_schema.json#/defs/race_kind"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "stats": {
              "anyOf": [
                {
                  "$ref": "https://rogue-todo.com/common_types_schema.json#/defs/stat_points"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "inventory": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/inventory"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "tile": {
              "anyOf": [
                {
                  "$ref": "https://rogue-todo.com/common_types_schema.json#/defs/tile"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "level_entry_exit": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/level_entry_exit"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "loot_interact": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/loot_interact"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "world_entry": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/world_entry"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "spawn_entity_post_interaction": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/spawn_entity_post_interaction"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "damage": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/damage"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "serialization_id": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/serialization_id"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            },
            "effect_executor": {
              "anyOf": [
                {
                  "$ref": "#/defs/assembler_types/effect_executor"
                },
                {
                  "type": "boolean",
                  "const": false
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "assembler_types": {
      "door": {
        "type": "object",
        "required": ["is_open", "closed_tile", "open_tile"],
        "properties": {
          "is_open": {
            "type": "boolean",
            "description": "Whether the door is open or closed"
          },
          "key": {
            "type": "string",
            "description": "If provided key that opens the door"
          },
          "closed_tile": {
            "$ref": "https://rogue-todo.com/common_types_schema.json#/defs/tile"
          },
          "open_tile": {
            "$ref": "https://rogue-todo.com/common_types_schema.json#/defs/tile"
          }
        },
        "additionalProperties": false
      },
      "inventory": {
        "type": "object",
        "required": ["loot_table"],
        "properties": {
          "loot_table": {
            "type": "string",
            "description": "Name of the loot table to use for creating this inventory"
          },
          "max_stack_size": {
            "type": "integer",
            "description": "Maximum number of items that can be stacked in a single slot"
          }
        },
        "additionalProperties": false
      },
      "level_entry_exit": {
        "type": "object",
        "required": ["is_exit", "level_id"],
        "properties": {
          "is_exit": {
            "type": "boolean",
            "description": "Whether the entity is an exit or an entry"
          },
          "level_id": {
            "type": "integer",
            "description": "Id of the level to enter or exit"
          }
        },
        "additionalProperties": false
      },
      "loot_interact": {
        "type": "object",
        "required": [
          "is_looted",
          "is_persistent",
          "loot_name",
          "interact_text",
          "default_tile",
          "looted_tile"
        ],
        "properties": {
          "is_looted": {
            "type": "boolean",
            "description": "Whether the loot has been looted or not"
          },
          "is_persistent": {
            "type": "boolean",
            "description": "Non persistent empty loot will be removed"
          },
          "loot_name": {
            "type": "string",
            "description": "Header for the UI window"
          },
          "interact_text": {
            "type": "string",
            "description": "Text to display when interacting"
          },
          "default_tile": {
            "$ref": "https://rogue-todo.com/common_types_schema.json#/defs/tile"
          },
          "looted_tile": {
            "$ref": "https://rogue-todo.com/common_types_schema.json#/defs/tile"
          }
        },
        "additionalProperties": false
      },
      "world_entry": {
        "type": "object",
        "required": ["level_name"],
        "properties": {
          "level_name": {
            "type": "string",
            "description": "Name of the level to enter"
          }
        },
        "additionalProperties": false
      },
      "spawn_entity_post_interaction": {
        "type": "object",
        "required": ["entity_name"],
        "properties": {
          "entity_name": {
            "type": "string",
            "description": "Name of the entity to spawn"
          },
          "chance": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Chance of spawning the entity"
          },
          "uses": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of times the entity can be spawned from the interaction, 0 means infinite"
          }
        },
        "additionalProperties": false
      },
      "damage": {
        "type": "object",
        "required": ["phys_damage", "magic_damage"],
        "properties": {
          "phys_damage": {
            "type": "number",
            "description": "Physical damage"
          },
          "magic_damage": {
            "type": "number",
            "description": "Magic damage"
          },
          "hits": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of hits before the entity is destroyed, default 1"
          },
          "ticks": {
            "type": "integer",
            "description": "Number of ticks before the entity is destroyed, default -1 (never)"
          }
        },
        "additionalProperties": false
      },
      "serialization_id": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id to use for serialization",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "effect_executor": {
        "type": "object",
        "required": ["effects"],
        "properties": {
          "effects": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["effect_name", "min_delay", "max_delay"],
              "properties": {
                "effect_name": {
                  "type": "string",
                  "description": "Name of the effect to execute"
                },
                "min_delay": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Minimum delay before executing the effect"
                },
                "max_delay": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Maximum delay before executing the effect"
                }
              },
              "additionalProperties": false
            }
          }
        },
        "additionalProperties": false
      },
      "on_off": {
        "type": "boolean",
        "description": "Type for assemblers that can only be enabled or disabled"
      }
    }
  },
  "additionalProperties": false
}
